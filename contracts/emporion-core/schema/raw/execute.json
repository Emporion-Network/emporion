{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "blacklist"
      ],
      "properties": {
        "blacklist": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "unblacklist"
      ],
      "properties": {
        "unblacklist": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "invest"
      ],
      "properties": {
        "invest": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "divest"
      ],
      "properties": {
        "divest": {
          "type": "object",
          "required": [
            "to_divest"
          ],
          "properties": {
            "to_divest": {
              "$ref": "#/definitions/AssetListBase_for_String"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "withdraw"
      ],
      "properties": {
        "withdraw": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "create_order"
      ],
      "properties": {
        "create_order": {
          "$ref": "#/definitions/CreateOrderExecuteMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "accept_order"
      ],
      "properties": {
        "accept_order": {
          "type": "object",
          "required": [
            "order_id"
          ],
          "properties": {
            "order_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "finalize_order"
      ],
      "properties": {
        "finalize_order": {
          "type": "object",
          "required": [
            "order_id"
          ],
          "properties": {
            "order_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "add_products_to_order"
      ],
      "properties": {
        "add_products_to_order": {
          "type": "object",
          "required": [
            "cart",
            "order_id"
          ],
          "properties": {
            "cart": {
              "type": "array",
              "items": {
                "type": "array",
                "items": [
                  {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  {
                    "$ref": "#/definitions/AssetInfoBase_for_String"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "order_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "reject_order"
      ],
      "properties": {
        "reject_order": {
          "type": "object",
          "required": [
            "order_id"
          ],
          "properties": {
            "order_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "fulfill_order"
      ],
      "properties": {
        "fulfill_order": {
          "type": "object",
          "required": [
            "order_id"
          ],
          "properties": {
            "order_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "dispute_order"
      ],
      "properties": {
        "dispute_order": {
          "type": "object",
          "required": [
            "order_id"
          ],
          "properties": {
            "order_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "review_user"
      ],
      "properties": {
        "review_user": {
          "$ref": "#/definitions/ReviewUserExecuteMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "review_product"
      ],
      "properties": {
        "review_product": {
          "$ref": "#/definitions/ReviewProductExecuteMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "create_product"
      ],
      "properties": {
        "create_product": {
          "$ref": "#/definitions/CreateProductExecuteMessage"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "list_product"
      ],
      "properties": {
        "list_product": {
          "type": "object",
          "required": [
            "product_id"
          ],
          "properties": {
            "product_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "un_list_product"
      ],
      "properties": {
        "un_list_product": {
          "type": "object",
          "required": [
            "product_id"
          ],
          "properties": {
            "product_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "distribute_rewards"
      ],
      "properties": {
        "distribute_rewards": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_params"
      ],
      "properties": {
        "update_params": {
          "$ref": "#/definitions/InstantiateMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_admin"
      ],
      "properties": {
        "update_admin": {
          "type": "object",
          "required": [
            "new_admin"
          ],
          "properties": {
            "new_admin": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "withdraw_to_dev"
      ],
      "properties": {
        "withdraw_to_dev": {
          "type": "object",
          "required": [
            "amount",
            "to"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/AssetListBase_for_String"
            },
            "to": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_user_info"
      ],
      "properties": {
        "update_user_info": {
          "type": "object",
          "properties": {
            "alias": {
              "type": [
                "string",
                "null"
              ]
            },
            "logo": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AssetBase_for_String": {
      "description": "Represents a fungible asset with a known amount\n\nEach asset instance contains two values: `info`, which specifies the asset's type (CW20 or native), and its `amount`, which specifies the asset's amount.",
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "description": "Specifies the asset's amount",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "info": {
          "description": "Specifies the asset's type (CW20 or native)",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfoBase_for_String"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "AssetInfoBase_for_String": {
      "description": "Represents the type of an fungible asset.\n\nEach **asset info** instance can be one of three variants:\n\n- Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "native"
          ],
          "properties": {
            "native": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "cw20"
          ],
          "properties": {
            "cw20": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "AssetListBase_for_String": {
      "description": "Represents a list of fungible tokens, each with a known amount",
      "type": "array",
      "items": {
        "$ref": "#/definitions/AssetBase_for_String"
      }
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "CreateOrderExecuteMsg": {
      "type": "object",
      "required": [
        "buyer_risk_share",
        "cart",
        "ready",
        "seller"
      ],
      "properties": {
        "buyer_risk_share": {
          "type": "array",
          "items": [
            {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          ],
          "maxItems": 2,
          "minItems": 2
        },
        "cart": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              {
                "$ref": "#/definitions/AssetInfoBase_for_String"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        },
        "ready": {
          "type": "boolean"
        },
        "seller": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "CreateProductExecuteMessage": {
      "type": "object",
      "required": [
        "delivery_time",
        "is_listed",
        "meta",
        "meta_hash",
        "price"
      ],
      "properties": {
        "delivery_time": {
          "$ref": "#/definitions/Duration"
        },
        "is_listed": {
          "type": "boolean"
        },
        "meta": {
          "type": "string"
        },
        "meta_hash": {
          "type": "string"
        },
        "price": {
          "$ref": "#/definitions/AssetListBase_for_String"
        }
      },
      "additionalProperties": false
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Distribution": {
      "description": "Distribution   ///",
      "type": "object",
      "required": [
        "to_claim_reserve",
        "to_dev",
        "to_investors"
      ],
      "properties": {
        "to_claim_reserve": {
          "type": "array",
          "items": [
            {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          ],
          "maxItems": 2,
          "minItems": 2
        },
        "to_dev": {
          "type": "array",
          "items": [
            {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          ],
          "maxItems": 2,
          "minItems": 2
        },
        "to_investors": {
          "type": "array",
          "items": [
            {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          ],
          "maxItems": 2,
          "minItems": 2
        }
      },
      "additionalProperties": false
    },
    "Duration": {
      "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "height"
          ],
          "properties": {
            "height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Time in seconds",
          "type": "object",
          "required": [
            "time"
          ],
          "properties": {
            "time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "InstantiateMsg": {
      "description": "InstantiateMsg  ///",
      "type": "object",
      "required": [
        "admin",
        "dev",
        "fee_distribution",
        "fee_ratio",
        "investment_distribution",
        "max_contract_risk_share",
        "publication_fee",
        "publication_fee_distribution",
        "reward_rate",
        "unbounding_duration",
        "weighted_accepted_assets"
      ],
      "properties": {
        "admin": {
          "type": "string"
        },
        "dev": {
          "type": "string"
        },
        "fee_distribution": {
          "$ref": "#/definitions/Distribution"
        },
        "fee_ratio": {
          "type": "array",
          "items": [
            {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          ],
          "maxItems": 2,
          "minItems": 2
        },
        "investment_distribution": {
          "$ref": "#/definitions/Distribution"
        },
        "max_contract_risk_share": {
          "type": "array",
          "items": [
            {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          ],
          "maxItems": 2,
          "minItems": 2
        },
        "publication_fee": {
          "$ref": "#/definitions/AssetListBase_for_String"
        },
        "publication_fee_distribution": {
          "$ref": "#/definitions/Distribution"
        },
        "reward_rate": {
          "$ref": "#/definitions/Duration"
        },
        "unbounding_duration": {
          "$ref": "#/definitions/Duration"
        },
        "weighted_accepted_assets": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "$ref": "#/definitions/AssetInfoBase_for_String"
              },
              {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false
    },
    "ReviewProductExecuteMsg": {
      "type": "object",
      "required": [
        "message",
        "order_id",
        "product_id",
        "rating"
      ],
      "properties": {
        "message": {
          "type": "string"
        },
        "order_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "product_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "rating": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "ReviewUserExecuteMsg": {
      "type": "object",
      "required": [
        "message",
        "order_id",
        "rating"
      ],
      "properties": {
        "message": {
          "type": "string"
        },
        "order_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "rating": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
