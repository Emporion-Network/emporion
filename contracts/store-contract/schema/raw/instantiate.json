{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "description": "InstantiateMsg  ///",
  "type": "object",
  "required": [
    "admin",
    "fee",
    "fee_distribution",
    "investment_distribution",
    "max_contract_risk_share",
    "publication_fee",
    "publication_fee_distribution",
    "reward_rate",
    "unbounding_duration",
    "weighted_accepted_assets"
  ],
  "properties": {
    "admin": {
      "type": "string"
    },
    "fee": {
      "type": "array",
      "items": [
        {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      ],
      "maxItems": 2,
      "minItems": 2
    },
    "fee_distribution": {
      "$ref": "#/definitions/Distribution"
    },
    "investment_distribution": {
      "$ref": "#/definitions/Distribution"
    },
    "max_contract_risk_share": {
      "type": "array",
      "items": [
        {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      ],
      "maxItems": 2,
      "minItems": 2
    },
    "publication_fee": {
      "$ref": "#/definitions/AssetListBase_for_String"
    },
    "publication_fee_distribution": {
      "$ref": "#/definitions/Distribution"
    },
    "reward_rate": {
      "$ref": "#/definitions/Duration"
    },
    "unbounding_duration": {
      "$ref": "#/definitions/Duration"
    },
    "weighted_accepted_assets": {
      "type": "array",
      "items": {
        "type": "array",
        "items": [
          {
            "$ref": "#/definitions/AssetInfoBase_for_String"
          },
          {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        ],
        "maxItems": 2,
        "minItems": 2
      }
    }
  },
  "additionalProperties": false,
  "definitions": {
    "AssetBase_for_String": {
      "description": "Represents a fungible asset with a known amount\n\nEach asset instance contains two values: `info`, which specifies the asset's type (CW20 or native), and its `amount`, which specifies the asset's amount.",
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "description": "Specifies the asset's amount",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "info": {
          "description": "Specifies the asset's type (CW20 or native)",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfoBase_for_String"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "AssetInfoBase_for_String": {
      "description": "Represents the type of an fungible asset.\n\nEach **asset info** instance can be one of three variants:\n\n- Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "native"
          ],
          "properties": {
            "native": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "cw20"
          ],
          "properties": {
            "cw20": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "AssetListBase_for_String": {
      "description": "Represents a list of fungible tokens, each with a known amount",
      "type": "array",
      "items": {
        "$ref": "#/definitions/AssetBase_for_String"
      }
    },
    "Distribution": {
      "description": "Distribution   ///",
      "type": "object",
      "required": [
        "to_claim_reserve",
        "to_dev",
        "to_investors"
      ],
      "properties": {
        "to_claim_reserve": {
          "type": "array",
          "items": [
            {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          ],
          "maxItems": 2,
          "minItems": 2
        },
        "to_dev": {
          "type": "array",
          "items": [
            {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          ],
          "maxItems": 2,
          "minItems": 2
        },
        "to_investors": {
          "type": "array",
          "items": [
            {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          ],
          "maxItems": 2,
          "minItems": 2
        }
      },
      "additionalProperties": false
    },
    "Duration": {
      "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "height"
          ],
          "properties": {
            "height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Time in seconds",
          "type": "object",
          "required": [
            "time"
          ],
          "properties": {
            "time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
