/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Uint128 = string;
export type AssetInfoBaseForString = {
  native: string;
} | {
  cw20: string;
};
export type AssetListBaseForString = AssetBaseForString[];
export type Duration = {
  height: number;
} | {
  time: number;
};
export interface InstantiateMsg {
  admin: string;
  dev: string;
  fee_distribution: Distribution;
  fee_ratio: [number, number];
  investment_distribution: Distribution;
  max_contract_risk_share: [number, number];
  publication_fee: AssetListBaseForString;
  publication_fee_distribution: Distribution;
  reward_rate: Duration;
  unbounding_duration: Duration;
  weighted_accepted_assets: [AssetInfoBaseForString, number][];
}
export interface Distribution {
  to_claim_reserve: [number, number];
  to_dev: [number, number];
  to_investors: [number, number];
}
export interface AssetBaseForString {
  amount: Uint128;
  info: AssetInfoBaseForString;
}
export type ExecuteMsg = {
  blacklist: string[];
} | {
  unblacklist: string[];
} | {
  invest: {};
} | {
  divest: {
    to_divest: AssetListBaseForString;
  };
} | {
  withdraw: {};
} | {
  create_order: CreateOrderExecuteMsg;
} | {
  accept_order: {
    order_id: number;
  };
} | {
  finalize_order: {
    order_id: number;
  };
} | {
  add_products_to_order: {
    cart: [number, AssetInfoBaseForString][];
    order_id: number;
  };
} | {
  reject_order: {
    order_id: number;
  };
} | {
  fulfill_order: {
    order_id: number;
  };
} | {
  dispute_order: {
    order_id: number;
  };
} | {
  review_user: ReviewUserExecuteMsg;
} | {
  review_product: ReviewProductExecuteMsg;
} | {
  create_product: CreateProductExecuteMessage;
} | {
  list_product: {
    product_id: number;
  };
} | {
  un_list_product: {
    product_id: number;
  };
} | {
  receive: Cw20ReceiveMsg;
} | {
  distribute_rewards: {};
} | {
  update_params: InstantiateMsg;
} | {
  update_admin: {
    new_admin: string;
  };
} | {
  withdraw_to_dev: {
    amount: AssetListBaseForString;
    to: string;
  };
};
export type Binary = string;
export interface CreateOrderExecuteMsg {
  buyer_risk_share: [number, number];
  cart: [number, AssetInfoBaseForString][];
  ready: boolean;
  seller: string;
}
export interface ReviewUserExecuteMsg {
  message: string;
  order_id: number;
  rating: number;
}
export interface ReviewProductExecuteMsg {
  message: string;
  order_id: number;
  product_id: number;
  rating: number;
}
export interface CreateProductExecuteMessage {
  delivery_time: Duration;
  is_listed: boolean;
  meta: string;
  meta_hash: string;
  price: AssetListBaseForString;
}
export interface Cw20ReceiveMsg {
  amount: Uint128;
  msg: Binary;
  sender: string;
}
export type QueryMsg = {
  info: {};
} | {
  total_power_at_height: {
    height?: number | null;
  };
} | {
  params: {};
} | {
  bank: {};
} | {
  voting_power_at_height: {
    address: string;
    height?: number | null;
  };
} | {
  user_stats: {
    addr: string;
  };
} | {
  orders_from_buyer: {
    addr: string;
    start_from?: number | null;
  };
} | {
  order: {
    order_id: number;
  };
} | {
  orders_for_seller: {
    addr: string;
    start_from?: number | null;
  };
} | {
  reviews_of_product: {
    product_id: number;
    start_from?: number | null;
  };
} | {
  reviews_of_reviewed: {
    addr: string;
    start_from?: number | null;
  };
} | {
  reviews_from_reviewer: {
    addr: string;
    start_from?: number | null;
  };
} | {
  products_of_seller: {
    addr: string;
    start_from?: number | null;
  };
} | {
  product_all: {
    start_from?: number | null;
  };
} | {
  product_by_id: {
    product_id: number;
  };
} | {
  blacklisted: {
    start_from?: string | null;
  };
} | {
  blacklisted_check: {
    addrs: string[];
  };
};
export interface MigrateMsg {}
export type AssetInfoBaseForAddr = {
  native: string;
} | {
  cw20: Addr;
};
export type Addr = string;
export type AssetListBaseForAddr = AssetBaseForAddr[];
export interface Bank {
  to_claim_reserve: AssetListBaseForAddr;
  to_dev: AssetListBaseForAddr;
  to_investors: AssetListBaseForAddr;
  total_invested: AssetListBaseForAddr;
}
export interface AssetBaseForAddr {
  amount: Uint128;
  info: AssetInfoBaseForAddr;
}
export type TupleOfArrayOfAddrAndNullable_Addr = [Addr[], Addr | null];
export type ArrayOfAddr = Addr[];
export interface InfoResponse {
  info: ContractVersion;
}
export interface ContractVersion {
  contract: string;
  version: string;
}
export type Timestamp = Uint64;
export type Uint64 = string;
export type Expiration = {
  at_height: number;
} | {
  at_time: Timestamp;
} | {
  never: {};
};
export type OrderStatus = "creating" | "pending" | "accepted" | "rejected" | "fulfilled" | "disputed";
export interface Order {
  buyer: Addr;
  buyer_risk_share: [number, number];
  cart: [number, AssetBaseForAddr][];
  created_at: Timestamp;
  expected_delivery: Expiration;
  id: number;
  seller: Addr;
  status: OrderStatus;
  total: AssetListBaseForAddr;
}
export type TupleOfArrayOfOrderAndNullableUint64 = [Order[], number | null];
export interface ContractParams {
  admin: Addr;
  dev: Addr;
  fee: [number, number];
  fee_distribution: Distribution;
  investment_distribution: Distribution;
  max_contract_risk_share: [number, number];
  publication_fee: AssetListBaseForAddr;
  publication_fee_distribution: Distribution;
  reward_rate: Duration;
  unbounding_duration: Duration;
  weighted_accepted_assets: [AssetInfoBaseForAddr, number][];
}
export type TupleOfArrayOfProductAndNullableUint64 = [Product[], number | null];
export interface Product {
  delivery_time: Duration;
  id: number;
  is_listed: boolean;
  meta: string;
  meta_hash: string;
  price: AssetListBaseForAddr;
  rating: [number, number];
  seller: Addr;
}
export type TupleOfArrayOfReviewAndNullableUint64 = [Review[], number | null];
export type ReviewOf = {
  user: Addr;
} | {
  product: number;
};
export interface Review {
  from: Addr;
  id: number;
  message: string;
  of: ReviewOf;
  rating: number;
}
export interface TotalPowerAtHeightResponse {
  height: number;
  power: Uint128;
}
export interface User {
  addr: Addr;
  generated_fees: AssetListBaseForAddr;
  invested: AssetListBaseForAddr;
  nb_disputed_orders: number;
  nb_fulfilled_orders: number;
  nb_orders: number;
  nb_rejected_orders: number;
  rating: [number, number];
  unbonding: [AssetBaseForAddr, Expiration][];
}
export interface VotingPowerAtHeightResponse {
  height: number;
  power: Uint128;
}
export class EmporionQueryClient<T extends {queryContractSmart:(address:string, msg:any)=>Promise<any>}> {
    client: T;
    contractAddress: string;
    constructor(client: T, contractAddress: string) {
        this.client = client;
        this.contractAddress = contractAddress;
    }
    async info(msg:Extract<QueryMsg, {info:any}>["info"]):Promise<InfoResponse>{
        return this.client.queryContractSmart(this.contractAddress, {
            info:msg
        });
    }

    async total_power_at_height(msg:Extract<QueryMsg, {total_power_at_height:any}>["total_power_at_height"]):Promise<TotalPowerAtHeightResponse>{
        return this.client.queryContractSmart(this.contractAddress, {
            total_power_at_height:msg
        });
    }

    async params(msg:Extract<QueryMsg, {params:any}>["params"]):Promise<ContractParams>{
        return this.client.queryContractSmart(this.contractAddress, {
            params:msg
        });
    }

    async bank(msg:Extract<QueryMsg, {bank:any}>["bank"]):Promise<Bank>{
        return this.client.queryContractSmart(this.contractAddress, {
            bank:msg
        });
    }

    async voting_power_at_height(msg:Extract<QueryMsg, {voting_power_at_height:any}>["voting_power_at_height"]):Promise<VotingPowerAtHeightResponse>{
        return this.client.queryContractSmart(this.contractAddress, {
            voting_power_at_height:msg
        });
    }

    async user_stats(msg:Extract<QueryMsg, {user_stats:any}>["user_stats"]):Promise<User>{
        return this.client.queryContractSmart(this.contractAddress, {
            user_stats:msg
        });
    }

    async orders_from_buyer(msg:Extract<QueryMsg, {orders_from_buyer:any}>["orders_from_buyer"]):Promise<TupleOfArrayOfOrderAndNullableUint64>{
        return this.client.queryContractSmart(this.contractAddress, {
            orders_from_buyer:msg
        });
    }

    async order(msg:Extract<QueryMsg, {order:any}>["order"]):Promise<Order>{
        return this.client.queryContractSmart(this.contractAddress, {
            order:msg
        });
    }

    async orders_for_seller(msg:Extract<QueryMsg, {orders_for_seller:any}>["orders_for_seller"]):Promise<TupleOfArrayOfOrderAndNullableUint64>{
        return this.client.queryContractSmart(this.contractAddress, {
            orders_for_seller:msg
        });
    }

    async reviews_of_product(msg:Extract<QueryMsg, {reviews_of_product:any}>["reviews_of_product"]):Promise<TupleOfArrayOfReviewAndNullableUint64>{
        return this.client.queryContractSmart(this.contractAddress, {
            reviews_of_product:msg
        });
    }

    async reviews_of_reviewed(msg:Extract<QueryMsg, {reviews_of_reviewed:any}>["reviews_of_reviewed"]):Promise<TupleOfArrayOfReviewAndNullableUint64>{
        return this.client.queryContractSmart(this.contractAddress, {
            reviews_of_reviewed:msg
        });
    }

    async reviews_from_reviewer(msg:Extract<QueryMsg, {reviews_from_reviewer:any}>["reviews_from_reviewer"]):Promise<TupleOfArrayOfReviewAndNullableUint64>{
        return this.client.queryContractSmart(this.contractAddress, {
            reviews_from_reviewer:msg
        });
    }

    async products_of_seller(msg:Extract<QueryMsg, {products_of_seller:any}>["products_of_seller"]):Promise<TupleOfArrayOfProductAndNullableUint64>{
        return this.client.queryContractSmart(this.contractAddress, {
            products_of_seller:msg
        });
    }

    async product_all(msg:Extract<QueryMsg, {product_all:any}>["product_all"]):Promise<TupleOfArrayOfProductAndNullableUint64>{
        return this.client.queryContractSmart(this.contractAddress, {
            product_all:msg
        });
    }

    async product_by_id(msg:Extract<QueryMsg, {product_by_id:any}>["product_by_id"]):Promise<Product>{
        return this.client.queryContractSmart(this.contractAddress, {
            product_by_id:msg
        });
    }

    async blacklisted(msg:Extract<QueryMsg, {blacklisted:any}>["blacklisted"]):Promise<TupleOfArrayOfAddrAndNullableAddr>{
        return this.client.queryContractSmart(this.contractAddress, {
            blacklisted:msg
        });
    }

    async blacklisted_check(msg:Extract<QueryMsg, {blacklisted_check:any}>["blacklisted_check"]):Promise<ArrayOfAddr>{
        return this.client.queryContractSmart(this.contractAddress, {
            blacklisted_check:msg
        });
    }
}
export class EmporionClient<T extends {execute:(sender:string,contractAddress:string, msg:any, fee:any, memo:any, funds:any)=>Promise<any>,queryContractSmart:(address:string, msg:any)=>Promise<any>}> {
    client: T;
    contractAddress: string;
    sender: string;
    constructor(client: T, sender: string, contractAddress: string) {
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
    }
    async info(msg:Extract<QueryMsg, {info:any}>["info"]):Promise<InfoResponse>{
        return this.client.queryContractSmart(this.contractAddress, {
            info:msg
        });
    }

    async total_power_at_height(msg:Extract<QueryMsg, {total_power_at_height:any}>["total_power_at_height"]):Promise<TotalPowerAtHeightResponse>{
        return this.client.queryContractSmart(this.contractAddress, {
            total_power_at_height:msg
        });
    }

    async params(msg:Extract<QueryMsg, {params:any}>["params"]):Promise<ContractParams>{
        return this.client.queryContractSmart(this.contractAddress, {
            params:msg
        });
    }

    async bank(msg:Extract<QueryMsg, {bank:any}>["bank"]):Promise<Bank>{
        return this.client.queryContractSmart(this.contractAddress, {
            bank:msg
        });
    }

    async voting_power_at_height(msg:Extract<QueryMsg, {voting_power_at_height:any}>["voting_power_at_height"]):Promise<VotingPowerAtHeightResponse>{
        return this.client.queryContractSmart(this.contractAddress, {
            voting_power_at_height:msg
        });
    }

    async user_stats(msg:Extract<QueryMsg, {user_stats:any}>["user_stats"]):Promise<User>{
        return this.client.queryContractSmart(this.contractAddress, {
            user_stats:msg
        });
    }

    async orders_from_buyer(msg:Extract<QueryMsg, {orders_from_buyer:any}>["orders_from_buyer"]):Promise<TupleOfArrayOfOrderAndNullableUint64>{
        return this.client.queryContractSmart(this.contractAddress, {
            orders_from_buyer:msg
        });
    }

    async order(msg:Extract<QueryMsg, {order:any}>["order"]):Promise<Order>{
        return this.client.queryContractSmart(this.contractAddress, {
            order:msg
        });
    }

    async orders_for_seller(msg:Extract<QueryMsg, {orders_for_seller:any}>["orders_for_seller"]):Promise<TupleOfArrayOfOrderAndNullableUint64>{
        return this.client.queryContractSmart(this.contractAddress, {
            orders_for_seller:msg
        });
    }

    async reviews_of_product(msg:Extract<QueryMsg, {reviews_of_product:any}>["reviews_of_product"]):Promise<TupleOfArrayOfReviewAndNullableUint64>{
        return this.client.queryContractSmart(this.contractAddress, {
            reviews_of_product:msg
        });
    }

    async reviews_of_reviewed(msg:Extract<QueryMsg, {reviews_of_reviewed:any}>["reviews_of_reviewed"]):Promise<TupleOfArrayOfReviewAndNullableUint64>{
        return this.client.queryContractSmart(this.contractAddress, {
            reviews_of_reviewed:msg
        });
    }

    async reviews_from_reviewer(msg:Extract<QueryMsg, {reviews_from_reviewer:any}>["reviews_from_reviewer"]):Promise<TupleOfArrayOfReviewAndNullableUint64>{
        return this.client.queryContractSmart(this.contractAddress, {
            reviews_from_reviewer:msg
        });
    }

    async products_of_seller(msg:Extract<QueryMsg, {products_of_seller:any}>["products_of_seller"]):Promise<TupleOfArrayOfProductAndNullableUint64>{
        return this.client.queryContractSmart(this.contractAddress, {
            products_of_seller:msg
        });
    }

    async product_all(msg:Extract<QueryMsg, {product_all:any}>["product_all"]):Promise<TupleOfArrayOfProductAndNullableUint64>{
        return this.client.queryContractSmart(this.contractAddress, {
            product_all:msg
        });
    }

    async product_by_id(msg:Extract<QueryMsg, {product_by_id:any}>["product_by_id"]):Promise<Product>{
        return this.client.queryContractSmart(this.contractAddress, {
            product_by_id:msg
        });
    }

    async blacklisted(msg:Extract<QueryMsg, {blacklisted:any}>["blacklisted"]):Promise<TupleOfArrayOfAddrAndNullableAddr>{
        return this.client.queryContractSmart(this.contractAddress, {
            blacklisted:msg
        });
    }

    async blacklisted_check(msg:Extract<QueryMsg, {blacklisted_check:any}>["blacklisted_check"]):Promise<ArrayOfAddr>{
        return this.client.queryContractSmart(this.contractAddress, {
            blacklisted_check:msg
        });
    }
    async blacklist(msg:Extract<ExecuteMsg, {blacklist:any}>["blacklist"], fee?:Parameters<T['execute']>[3] , memo?:Parameters<T['execute']>[4], funds?:Parameters<T['execute']>[5]):Promise<ReturnType<T['execute']>>{
        return this.client.execute(this.sender, this.contractAddress, {
            blacklist:msg
        },fee, memo, funds);
    }

    async unblacklist(msg:Extract<ExecuteMsg, {unblacklist:any}>["unblacklist"], fee?:Parameters<T['execute']>[3] , memo?:Parameters<T['execute']>[4], funds?:Parameters<T['execute']>[5]):Promise<ReturnType<T['execute']>>{
        return this.client.execute(this.sender, this.contractAddress, {
            unblacklist:msg
        },fee, memo, funds);
    }

    async invest(msg:Extract<ExecuteMsg, {invest:any}>["invest"], fee?:Parameters<T['execute']>[3] , memo?:Parameters<T['execute']>[4], funds?:Parameters<T['execute']>[5]):Promise<ReturnType<T['execute']>>{
        return this.client.execute(this.sender, this.contractAddress, {
            invest:msg
        },fee, memo, funds);
    }

    async divest(msg:Extract<ExecuteMsg, {divest:any}>["divest"], fee?:Parameters<T['execute']>[3] , memo?:Parameters<T['execute']>[4], funds?:Parameters<T['execute']>[5]):Promise<ReturnType<T['execute']>>{
        return this.client.execute(this.sender, this.contractAddress, {
            divest:msg
        },fee, memo, funds);
    }

    async withdraw(msg:Extract<ExecuteMsg, {withdraw:any}>["withdraw"], fee?:Parameters<T['execute']>[3] , memo?:Parameters<T['execute']>[4], funds?:Parameters<T['execute']>[5]):Promise<ReturnType<T['execute']>>{
        return this.client.execute(this.sender, this.contractAddress, {
            withdraw:msg
        },fee, memo, funds);
    }

    async create_order(msg:Extract<ExecuteMsg, {create_order:any}>["create_order"], fee?:Parameters<T['execute']>[3] , memo?:Parameters<T['execute']>[4], funds?:Parameters<T['execute']>[5]):Promise<ReturnType<T['execute']>>{
        return this.client.execute(this.sender, this.contractAddress, {
            create_order:msg
        },fee, memo, funds);
    }

    async accept_order(msg:Extract<ExecuteMsg, {accept_order:any}>["accept_order"], fee?:Parameters<T['execute']>[3] , memo?:Parameters<T['execute']>[4], funds?:Parameters<T['execute']>[5]):Promise<ReturnType<T['execute']>>{
        return this.client.execute(this.sender, this.contractAddress, {
            accept_order:msg
        },fee, memo, funds);
    }

    async finalize_order(msg:Extract<ExecuteMsg, {finalize_order:any}>["finalize_order"], fee?:Parameters<T['execute']>[3] , memo?:Parameters<T['execute']>[4], funds?:Parameters<T['execute']>[5]):Promise<ReturnType<T['execute']>>{
        return this.client.execute(this.sender, this.contractAddress, {
            finalize_order:msg
        },fee, memo, funds);
    }

    async add_products_to_order(msg:Extract<ExecuteMsg, {add_products_to_order:any}>["add_products_to_order"], fee?:Parameters<T['execute']>[3] , memo?:Parameters<T['execute']>[4], funds?:Parameters<T['execute']>[5]):Promise<ReturnType<T['execute']>>{
        return this.client.execute(this.sender, this.contractAddress, {
            add_products_to_order:msg
        },fee, memo, funds);
    }

    async reject_order(msg:Extract<ExecuteMsg, {reject_order:any}>["reject_order"], fee?:Parameters<T['execute']>[3] , memo?:Parameters<T['execute']>[4], funds?:Parameters<T['execute']>[5]):Promise<ReturnType<T['execute']>>{
        return this.client.execute(this.sender, this.contractAddress, {
            reject_order:msg
        },fee, memo, funds);
    }

    async fulfill_order(msg:Extract<ExecuteMsg, {fulfill_order:any}>["fulfill_order"], fee?:Parameters<T['execute']>[3] , memo?:Parameters<T['execute']>[4], funds?:Parameters<T['execute']>[5]):Promise<ReturnType<T['execute']>>{
        return this.client.execute(this.sender, this.contractAddress, {
            fulfill_order:msg
        },fee, memo, funds);
    }

    async dispute_order(msg:Extract<ExecuteMsg, {dispute_order:any}>["dispute_order"], fee?:Parameters<T['execute']>[3] , memo?:Parameters<T['execute']>[4], funds?:Parameters<T['execute']>[5]):Promise<ReturnType<T['execute']>>{
        return this.client.execute(this.sender, this.contractAddress, {
            dispute_order:msg
        },fee, memo, funds);
    }

    async review_user(msg:Extract<ExecuteMsg, {review_user:any}>["review_user"], fee?:Parameters<T['execute']>[3] , memo?:Parameters<T['execute']>[4], funds?:Parameters<T['execute']>[5]):Promise<ReturnType<T['execute']>>{
        return this.client.execute(this.sender, this.contractAddress, {
            review_user:msg
        },fee, memo, funds);
    }

    async review_product(msg:Extract<ExecuteMsg, {review_product:any}>["review_product"], fee?:Parameters<T['execute']>[3] , memo?:Parameters<T['execute']>[4], funds?:Parameters<T['execute']>[5]):Promise<ReturnType<T['execute']>>{
        return this.client.execute(this.sender, this.contractAddress, {
            review_product:msg
        },fee, memo, funds);
    }

    async create_product(msg:Extract<ExecuteMsg, {create_product:any}>["create_product"], fee?:Parameters<T['execute']>[3] , memo?:Parameters<T['execute']>[4], funds?:Parameters<T['execute']>[5]):Promise<ReturnType<T['execute']>>{
        return this.client.execute(this.sender, this.contractAddress, {
            create_product:msg
        },fee, memo, funds);
    }

    async list_product(msg:Extract<ExecuteMsg, {list_product:any}>["list_product"], fee?:Parameters<T['execute']>[3] , memo?:Parameters<T['execute']>[4], funds?:Parameters<T['execute']>[5]):Promise<ReturnType<T['execute']>>{
        return this.client.execute(this.sender, this.contractAddress, {
            list_product:msg
        },fee, memo, funds);
    }

    async un_list_product(msg:Extract<ExecuteMsg, {un_list_product:any}>["un_list_product"], fee?:Parameters<T['execute']>[3] , memo?:Parameters<T['execute']>[4], funds?:Parameters<T['execute']>[5]):Promise<ReturnType<T['execute']>>{
        return this.client.execute(this.sender, this.contractAddress, {
            un_list_product:msg
        },fee, memo, funds);
    }

    async receive(msg:Extract<ExecuteMsg, {receive:any}>["receive"], fee?:Parameters<T['execute']>[3] , memo?:Parameters<T['execute']>[4], funds?:Parameters<T['execute']>[5]):Promise<ReturnType<T['execute']>>{
        return this.client.execute(this.sender, this.contractAddress, {
            receive:msg
        },fee, memo, funds);
    }

    async distribute_rewards(msg:Extract<ExecuteMsg, {distribute_rewards:any}>["distribute_rewards"], fee?:Parameters<T['execute']>[3] , memo?:Parameters<T['execute']>[4], funds?:Parameters<T['execute']>[5]):Promise<ReturnType<T['execute']>>{
        return this.client.execute(this.sender, this.contractAddress, {
            distribute_rewards:msg
        },fee, memo, funds);
    }

    async update_params(msg:Extract<ExecuteMsg, {update_params:any}>["update_params"], fee?:Parameters<T['execute']>[3] , memo?:Parameters<T['execute']>[4], funds?:Parameters<T['execute']>[5]):Promise<ReturnType<T['execute']>>{
        return this.client.execute(this.sender, this.contractAddress, {
            update_params:msg
        },fee, memo, funds);
    }

    async update_admin(msg:Extract<ExecuteMsg, {update_admin:any}>["update_admin"], fee?:Parameters<T['execute']>[3] , memo?:Parameters<T['execute']>[4], funds?:Parameters<T['execute']>[5]):Promise<ReturnType<T['execute']>>{
        return this.client.execute(this.sender, this.contractAddress, {
            update_admin:msg
        },fee, memo, funds);
    }

    async withdraw_to_dev(msg:Extract<ExecuteMsg, {withdraw_to_dev:any}>["withdraw_to_dev"], fee?:Parameters<T['execute']>[3] , memo?:Parameters<T['execute']>[4], funds?:Parameters<T['execute']>[5]):Promise<ReturnType<T['execute']>>{
        return this.client.execute(this.sender, this.contractAddress, {
            withdraw_to_dev:msg
        },fee, memo, funds);
    }

}
